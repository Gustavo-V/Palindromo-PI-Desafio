class PalindromePI {
    constructor() {
        this.pi;
        this.rangeOfPalindromeInPi = 9;
        this.piArr;
        this.fullArr;
        this.decreasingValuesArr;
        this.firstNineValues;
        this.arrFinal = new Array();
    }

    formatedPI(pi) {
        let piFormated = pi.toString();
        if (piFormated.includes(".") === true) {
            piFormated = piFormated.replace(".", ",");
        }
        piFormated = piFormated.slice(piFormated.lastIndexOf(",") + 1, piFormated.length);
        this.pi = piFormated;
        this.piArr = piFormated.split('');
        return piFormated;
    }

    firstNineValuesOfArr() {
        let str = '';
        for (let i = 0; i < 9; i++) {
            str += this.piArr[i];
        }
        return str;
    }

    createArrIteratingOneMoreValue() {
        const arr = new Array();
        for (let i = 0; i < this.piArr.length; i++) {
            for (let j = i; j < this.piArr.length; j++) {
                arr.push({ value: this.piArr[j + 1], positionI: i, positionJ: j + 1});
            }
        }
        return arr;
    }

    createArrWithValuesDecreasing() {
        let Obj = { str: '', arr: new Array() };
        for (let i = 0; i < this.fullArr.length; i++) {
            for (let j = 0; j < this.piArr.length; j++) {
                if (j == this.fullArr[i].positionJ - 1) {
                    if (this.fullArr[i].positionJ - this.fullArr[i].positionI == 1) {
                        Obj.str += ' ';
                    }
                    Obj.str += this.fullArr[i].value;
                }
            }
        }

        Obj.arr = Obj.str.split(' ');
        Obj.arr.shift();

        return Obj.arr;
    }

    sliceToNineValuesInArr() {
        let arr = new Array();
        this.decreasingValuesArr.forEach(element => {
            arr.push(element.slice(0, this.rangeOfPalindromeInPi));
        });
        return arr;
    }

    get getFirstPalindrome() {
        let arr = new Array();
        let reverseValues = new Array();
        this.arrFinal.unshift(this.firstNineValues);
        for (let i = 0; i < this.arrFinal.length; i++) {
            reverseValues.push([].map.call(this.arrFinal[i], function (target) { return target; }).reverse().join(''));
            if (reverseValues[i] === this.arrFinal[i]) {
                    arr.push(
                        {
                            value: this.arrFinal[i], isPalindrome: true, isPrime: this.setIsPrime(this.arrFinal[i])
                        }
                    );
            }
        }
        return arr;
    }

    setIsPrime(num){
        for(let i = 2; i < num; i++){
            if(num % i === 0) {
                return false;
            }
        }
        return num > 1;
    } 
}

let arr = new Array();

const palindrome = new PalindromePI();
palindrome.formatedPI("3,13260472156951623965864573021631598193195167353812974167729478672422924654366800980676928238280689964004824354037014163149658979409243237896907069779422362508221688957383798623001593776471651228935786015881617557829735233446042815126272037343146531977774160319906655418763979293344195215413418994854447345673831624993419131814809277771038638773431772075456545322077709212019051660962804909263601975988281613323166636528619326686336062735676303544776280350450777235547105859548702790814356240145171806246436267945612753181340783303362542327839449753824372058353114771199260638133467768796959703098339130771098704085913374641442822772634659470474587847787201927715280731767907707157213444730605700733492436931138350493163128404251219256517980694113528013147013047816437885185290928545201165839341965621349143415956258658655705526904965209858033850722426482939728584783163057777560688876446248246857926039535277348030480290058760758251047470916439613626760449256274204208320856611906254543372131535958450687724602901618766795240616342522577195429162991930645537799140373404328752628889639958794757291746426357455254079091451357111369410911939325191076020825202618798531887705842972591677813149699009019211697173727847684726860849003377024242916513005005168323364350389517029893922334517220138128069650117844087451960121228599371623130171144484640903890644954440061986907548516026327505298349187407866808818338510228334508504860825039302133219715518430635455007668282949304137765527939751754613953984683393638304746119966538581538420568533862186725233402830871123282789212507712629463229563989898935821167456270102183564622013496715188190973038119800497340723961036854066431939509790190699639552453005450580685501956730229219139339185680344903982059551002263535361920419947455385938102343955449597783779023742161727111723643435439478221818528624085140066604433258885698670543154706965747458550332323342107301545940516553790686627333799585115625784322988273723198987571415957811196358330059408730681216028764962867446047746491599505497374256269010490377819868359381465741268049256487985561453723478673303904688383436346553794986419270563872931748723320837601123029911367938627089438799362016295154133714248928307220126901475466847653576164773794675200490757155527819653621323926406160136358155907422020203187277605277219005561484255518792530343513984425322341576233610642506390497500865627109535919465897514131034822769306247435363256916078154781811528436679570611086153315044521274739245449454236828860613408414863776700961207151249140430272538607648236341433462351897576645216413767969031495019108575984423919862916421939949072362346468441173940326591840443780513338945257423995082965912285085558215725031071257012668302402929525220118726767562204154205161841634847565169998116141010029960783869092916030288400269104140792886215078424516709087000699282120660418371806535567252532567532861291042487761825829765157959847035622262934860034158722980534989650226291748788202734209222245339856264766914905562842503912757710284027998066365825488926488025456610172967026640765590429099456815065265305371829412703369313785178609040708667114965583434347693385781711386455873678123014587687126603489139095620099393610310291616152881384379099042317473363948045759314931405297634757481193567091101377517210080315590248530906692037671922033229094334676851422144773793937517034436619910403375111735471918550464490263655128162288244625759163330391072253837421821408835086573917715096828874782656995995744906617583441375223970968340800535598491754173818839994469748676265516582765848358845314277568790029095170283529716344562129640435231176006651012412006597558512761785838292041974844236080071930457618932349229279650198751872127267507981255470958904556357921221033346697499235630254947802490114195212382815309114079073860251522742995818072471625916685451333123948049470791191532673430282441860414263639548000448002670496248201792896476697583183271314251702969234889627668440323260927524960357996469256504936818360900323809293459588970695365349406034021665443755890045632882250545255640564482465151875471196218443965825337543885690941130315095261793780029741207665147939425902989695946995565761218656196733786236256125216320862869222103274889218654364802296780705765615144632046927906821207388377814233562823608963208068222468012248261177185896381409183903673672220888321513755600372798394004152970028783076670944474560134556417254370906979396122571429894671543578468788614445812314593571984922528471605049221242470141214780573455105008019086996033027634787081081754501193071412233908663938339529425786905076431006383519834389341596131854347546495569781038293097164651438407007073604112373599843452251610507027056235266012764848308407611830130527932054274628654036036745328651057065874882256981579367897669742205750596834408697350201410206723585020072452256326513410559240190274216248439140359989535394590944070469120914093870012645600162374288021092764579310657922955249887275846101264836999892256959688159205600101655256375678");
palindrome.firstNineValues = palindrome.firstNineValuesOfArr();
palindrome.fullArr = palindrome.createArrIteratingOneMoreValue();
palindrome.decreasingValuesArr = palindrome.createArrWithValuesDecreasing();
palindrome.arrFinal = palindrome.sliceToNineValuesInArr();

if(palindrome.getFirstPalindrome.length != 0){
    console.log(palindrome.getFirstPalindrome);
    arr.push(palindrome.getFirstPalindrome);
}else{
    console.log("Nenhum Palindromo");
}

// 5 mil
